// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SATMovieBrowser;
//
//    var discoverMovies = MovieDiscoverModel.FromJson(jsonString);

namespace SATMovieBrowser.Models
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using SATMovieBrowser.ViewModels;
    using TMDbLib.Client;
    using TMDbLib.Objects.Movies;

    public partial class MovieDiscoverModel
    {
        [JsonProperty("page")]
        public long Page { get; set; }

        [JsonProperty("total_results")]
        public long TotalResults { get; set; }

        [JsonProperty("total_pages")]
        public long TotalPages { get; set; }

        [JsonProperty("results")]
        public ObservableCollection<Result> Results { get; set; }

    }

    public partial class Result
    {
        [JsonProperty("popularity")]
        public double Popularity { get; set; }

        [JsonProperty("vote_count")]
        public long VoteCount { get; set; }

        [JsonProperty("video")]
        public bool Video { get; set; }

        [JsonProperty("poster_path")]
        public string PosterPath { get; set; }

        private List<long> _GenreIds { get; set; }
        [JsonProperty("genre_ids")]
        public List<long> GenreIds {
            get { return _GenreIds; }
            set {
                _GenreIds = value;
                string x1 = "";
                List<long> genreArray = GenreIds;

                foreach (var genre in genreArray)
                {
                    // App.MovieGenre.ContainsKey[(int)genre]
                    var x = genre;
                    x1 = x1 + App.MovieGenre.Where(w => w.Key == genre).FirstOrDefault().Value.ToString() + (genreArray.Count() > 1 ? " | " : "");
                }
                if (genreArray.Count() > 1)
                {
                    x1 = x1.Trim().Substring(0, x1.Trim().Length - 1);
                }

                Genres = x1;
                Duration = Genres;



            }
        }

       // private long _id { get; set; }
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("adult")]
        public bool Adult { get; set; }

        [JsonProperty("backdrop_path")]
        public string BackdropPath { get; set; }

        // [JsonProperty("original_language")]
        // public OriginalLanguage OriginalLanguage { get; set; }

        [JsonProperty("original_title")]
        public string OriginalTitle { get; set; }


        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("vote_average")]
        public double VoteAverage { get; set; }

        [JsonProperty("overview")]
        public string Overview { get; set; }

        [JsonProperty("release_date")]
        public DateTime? ReleaseDate { get; set; }

        public string Duration { get; set; }

        public string Genres { get; set; }
        

    }
    
    public enum OriginalLanguage { En, Ja, Ko, Tl };

    public partial class MovieDiscoverModel
    {
        public static MovieDiscoverModel FromJson(string json) => JsonConvert.DeserializeObject<MovieDiscoverModel>(json, SATMovieBrowser.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MovieDiscoverModel self) => JsonConvert.SerializeObject(self, SATMovieBrowser.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.DateTime,
            Converters =
            {
                OriginalLanguageConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class OriginalLanguageConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OriginalLanguage) || t == typeof(OriginalLanguage?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "en":
                    return OriginalLanguage.En;
                case "ja":
                    return OriginalLanguage.Ja;
                case "ko":
                    return OriginalLanguage.Ko;
                case "tl":
                    return OriginalLanguage.Tl;
            }
            throw new Exception("Cannot unmarshal type OriginalLanguage");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OriginalLanguage)untypedValue;
            switch (value)
            {
                case OriginalLanguage.En:
                    serializer.Serialize(writer, "en");
                    return;
                case OriginalLanguage.Ja:
                    serializer.Serialize(writer, "ja");
                    return;
                case OriginalLanguage.Ko:
                    serializer.Serialize(writer, "ko");
                    return;
                case OriginalLanguage.Tl:
                    serializer.Serialize(writer, "tl");
                    return;
            }
            throw new Exception("Cannot marshal type OriginalLanguage");
        }

        public static readonly OriginalLanguageConverter Singleton = new OriginalLanguageConverter();
    }
}
